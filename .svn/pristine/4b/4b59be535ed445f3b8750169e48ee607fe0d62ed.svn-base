package br.ufrj.cc.aleph.service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.Semaphore;

import br.ufrj.cc.aleph.domain.UserRequest;
import br.ufrj.cc.aleph.helper.StorageHelper;

public class ThreadHelper implements Runnable {
	
	private static ThreadHelper instance = new ThreadHelper();
	
	public ThreadHelper() {
		
	}
	
	public static ThreadHelper getInstance() {
		return instance;
	}
	
	public static Queue<UserRequest> userRequestQueue = new LinkedList<UserRequest>();
	private static Semaphore semaforo = new Semaphore(1);
	
	public void run() {
				
		try {
			semaforo.acquire();
			
			UserRequest userRequest = userRequestQueue.poll();
									
			System.out.println( userRequest.getEmail() );
			
			String templatePath = StorageHelper.generateTemplate( userRequest.getName(), userRequest.getEmail() );
			
			ProcessBuilder pb = new ProcessBuilder("/bin/bash", templatePath );			
			 
			Process p = pb.start();					
			
			p.waitFor();
			
			semaforo.release();
			 
		} catch ( IOException e ) {
			
			e.printStackTrace();
		} catch ( InterruptedException e ) {
			
			e.printStackTrace();
		} catch ( Exception e ) {
			
			e.printStackTrace();
		}
	}	
}
